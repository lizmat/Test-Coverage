=begin pod

=head1 NAME

Test::Coverage - Check test files for sufficient coverage

=head1 SYNOPSIS

=begin code :lang<raku>

# in xt/coverage.rakutest
use Test::Coverage;

plan 2;

coverage-at-least 80;  # ok if at least 80% of lines is covered

uncovered-at-most 10;  # ok if at most 10 lines are not covered

=end code

=head1 DESCRIPTION

The C<Test::Coverage> distribution provides an easy way for Raku
module developers to see whether the test-suite of their module
covers as much as possible of the code of their module.

As such it exports subroutines to allow easy checking in a test
script that lives in the "xt" directory, so that it will only
be run by the author.

Note that as such, this does B<not> add any dependencies to a
module, B<not> even for testing as "test-depends" as these tests
should only be run by the author in normal circumstances.

By default, all of the test files in the "t" directory, and its
subdirectories (extensions C<.rakutest> and C<.t>) will be run
against all of the unique files provided by the C<provides>
section in the C<META6.json> file.

For convenience, all of the features of the C<Test> module are
also exported by this module.

This distribution is really just a thin wrapper around all of
the functionality offered by the
L<C<Code::Coverage>|https://raku.land/zef:lizmat/Code::Coverage>
module.

=head1 SUBROUTINES

=head2 coverage-at-least

=begin code :lang<raku>

coverage-at-least 80;  # ok if at least 80% of lines is covered

=end code

The C<coverage-at-least> subroutine counts as a single test, and
reports a passed test if the percentage of lines covered by the
tests in the module reached the given amount (or more).

=head2 uncovered-at-most

=begin code :lang<raku>

uncovered-at-most 10;  # ok if at most 10 lines are not covered

=end code

The C<uncovered-at-most> subroutine counts as a single test, and
reports a passed test if the number of lines B<not> covered by
the tests in the module is less then or equal to the number given.

=head2 must-be-complete

=begin code :lang<raku>

report unless must-be-complete;

=end code

The C<must-be-complete> subroutine counts as a single test, and
reports a passed test if B<all> the coverable lines have been
covered.  This is usually used for very small modules, and only
as a insurance against accidental regressions.

=head2 default-coverage-setup

=begin code :lang<raku>

default-coverage-setup;

# run the actual tests and calculate coverage
run;

coverage-at-least 80;  # ok if at least 80% of lines is covered
uncovered-at-most 10;  # ok if at most 10 lines are not covered

=end code

The C<default-coverage-setup> subroutine sets up the underlying
L<C<Code::Coverage>|https://raku.land/zef:lizmat/Code::Coverage>
object, sets the C<$*CODE-COVERAGE> environment variable with it
and returns that.

In most situations this is not needed, as any call to the
C<coverage-at-least> and C<uncovered-at-most> subroutines will
trigger the setup and running of the tests automatically.

=head2 run

=begin code :lang<raku>

my $*CODE-COVERAGE := Code::Coverage.new(...);

run;

# check results

=end code

The C<run> subroutine runs the tests and updates any information
in the C<Code::Coverage> object that should be available in the
C<$*CODE-COVERAGE> environment variable.

It is only needed if some non-standard setup is needed, or if
you need to run the tests in a non-standard way:

=begin code :lang<raku>

default-coverage-setup;

run("foo");
run("bar");

# check results

=end code

=head2 report

=begin code :lang<raku>

report                          # show report if test failed
  unless uncovered-at-most 10;  # ok if at most 10 lines are not covered

=end code

The C<report> subroutine will print a report of the coverage tests if
called in sink context.  It is typically only called if a test fails.

If not in sink context, will return the string of the report:

=begin code :lang<raku>

mail report, :to<coverage@reports.org>;

=end code

=head2 source-with-coverage

=begin code :lang<raku>

source-with-coverage;  # produce as sibling dir to script

source-with-coverage($dir);

=end code

The C<source-with-coverage> subroutine will produce the annotated source
of all targets in the given directory (as an C<IO::Path>) with the
C<.rakucov> extension.  If called without any argument, will assume a
directory with the same name (but without extension) as the name of the
script.

So e.g. a script in C<xt/coverage.rakutest> in a C<Foo::Bar> distribution
would create a directory C<xt/coverage/Foo> and write the annotated source
in C<xt/coverage/Foo/Bar.rakucov>.

Note: if you're making use of this feature, it's probably wise to add
C<*.rakucov> to the C<.gitignore> file.

=head1 SEE ALSO

The L<C<App:RaCoCo>|https://raku.land/zef:atroxaper/App::RaCoCo> distribution
provides similar functionality, but is more app oriented rather than test
file-based.

=head1 AUTHOR

Elizabeth Mattijsen <liz@raku.rocks>

Source can be located at: https://github.com/lizmat/Test-Coverage .
Comments and Pull Requests are welcome.

If you like this module, or what I'm doing more generally, committing to a
L<small sponsorship|https://github.com/sponsors/lizmat/>  would mean a great
deal to me!

=head1 COPYRIGHT AND LICENSE

Copyright 2025 Elizabeth Mattijsen

This library is free software; you can redistribute it and/or modify it under the Artistic License 2.0.

=end pod

# vim: expandtab shiftwidth=4
